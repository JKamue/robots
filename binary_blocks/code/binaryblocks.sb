'BinaryBlocks Bot that Uses EV3 Basic
'Copyright (C)  2019  Jannes Kaspar-Müller

'################# Important Variables #################
'Sensor placement
sensor_front = 1
sensor_back = 2
sensor_front_right = 3
distance_sensor = 4

'Actor placement
motor_left = "A"
motor_left_num = 1
motor_right = "D"
motor_right_num = 4
motor_grab = "C"
motor_grab_num = 3
motor_lift = "B"
motor_lift_num = 2

'Building
number_to_build = -1
max_transport_height = 5

'Driving
max_speed = 55
max_back_speed = -35
max_turn_speed = 30
max_wiggle_speed = 40

'Other
min_bat = 50
claw_status = 0
claw_height = 0
block_height = 410

'Sad
true = "true"
false = "false"
right = 1
left = 2
back = 3

motors[1] = "A"
motors[2] = "B"
motors[3] = "C"
motors[4] = "D"
'##################### Routines ####################

Sub checkLaunchStatus
  'Checklist
  'Variables
  nogo = 0
  lcd_line = 5
  
  '#####
  '#LCD#
  '#####
  LCD.Clear()
  LCD.BmpFile(1,0,0,"img/startup")
  
  '#####
  '#LED#
  '#####
  EV3.SetLEDColor("OFF","Normal")
  
  '#####
  '#BAT#
  '#####
  If (EV3.BatteryLevel < min_bat) Then
    LCD.write(10,lcd_line,"BAT")
    lcd_line = lcd_line + 20
    nogo = 1
  EndIf
  
  '#####
  '#BTN#
  '#####
  Buttons.Flush()
  
  '############
  '#MOTA-MOTD#
  '############
  motors[1] = "MOTA"
  motors[2] = "MOTB"
  motors[3] = "MOTC"
  motors[4] = "MOTD"
  
  For motor = 1 To 4
    stat = F.Call1("checkMotor",motor)
    If (stat = 1) Then
      LCD.write(10,lcd_line,motors[motor]+stat)
      lcd_line = lcd_line + 20
      nogo = 1
    EndIf
  EndFor
  
  '#######
  '#SENS1 #
  '#######
  'Sensor 1, Front Colorsensor
  sensor1 = F.Call3("checkSensor",sensor_front,29,4)
  If (sensor1 <> 0) Then
    LCD.write(10,lcd_line,"SENS1"+sensor1)
    lcd_line = lcd_line + 20
    nogo = 1
  EndIf
  
  '#######
  '#SENS2#
  '#######
  sensor2 = F.Call3("checkSensor",sensor_back,29,4)
  If (sensor2 <> 0) Then
    LCD.write(10,lcd_line,"SENS2"+sensor2)
    lcd_line = lcd_line + 20
    nogo = 1
  EndIf
  
  '#######
  '#SENS3#
  '#######
  sensor3 = F.Call3("checkSensor",sensor_front_right,29,4)
  If (sensor3 <> 0) Then
    LCD.write(10,lcd_line,"SENS3"+sensor3)
    lcd_line = lcd_line + 20
    nogo = 1
  EndIf
  
  '#######
  '#SENS4#
  '#######
  sensor4 = F.Call3("checkSensor",distance_sensor,30,0)
  If (sensor4 <> 0) Then
    LCD.write(10,lcd_line,"SENS4"+sensor4)
    lcd_line = lcd_line + 20
    nogo = 1
  EndIf
  
  If (nogo = 1) Then
    EV3.SetLEDColor("Red","Flash")
    Speaker.Play(100, "sound/abort")
    Buttons.Wait()
    Program.End()
  EndIf
  'Ready for Liftoff
  LCD.BmpFile(1,0,0,"img/liftoff")
EndSub

Sub bin
  number = Byte.ToBinary(number_to_build)
  length = Text.GetLength(number)
  
  tmp[1] = Text.GetSubText(number,length,1)
  tmp[2] = Text.GetSubText(number,length-1,1)
  tmp[3] = Text.GetSubText(number,length-2,1)
  tmp[4] = Text.GetSubText(number,length-3,1)
  
  For i=1 To 4
    If (tmp[i] = "1") Then
      binary[i] = 1
    Else
      binary[i] = 0
    EndIf
  EndFor
EndSub

Sub input
  'To give th user a visual feedback
  EV3.SetLEDColor("RED","normal")
  
  'Define variables
  sounds[1] = "sound/white"
  sounds[0] = "sound/black_loud"
  
  first_block = 0
  second_block = 0
  blacks = 2
  whites = 0
  
  '#########################
  'Inputting the color of the first block
  '#########################
  Speaker.Play(100, "sound/select_the_blocks")
  
  'Wait till a button is pressed and then get the input
  Buttons.Wait()
  status = Buttons.Current
  
  'There are only two options
  'Scince the standart is black we know that it is white if any other button than enter is pressed
  If (Text.IsSubText(status, "U") Or Text.IsSubText(status, "D") Or Text.IsSubText(status, "L") Or Text.IsSubText(status, "R"))  Then
    first_block = 1
  EndIf
  
  Speaker.Play(100, sounds[first_block])
  EV3.SetLEDColor("ORANGE","normal")
  Buttons.Flush()
  
  '########################
  'Inputting color of the second block
  '########################
  
  'Wait till a button is pressed and then get the input
  Buttons.Wait()
  status = Buttons.Current
  
  'There are only two options
  'Scince the standart is black we know that it is white if any other button than enter is pressed
  If (Text.IsSubText(status, "U") Or Text.IsSubText(status, "D") Or Text.IsSubText(status, "L") Or Text.IsSubText(status, "R"))  Then
    second_block = 1
  EndIf
  Speaker.Play(100, sounds[second_block])
  EV3.SetLEDColor("GREEN","normal")
  
  Buttons.Flush()
  
  '###############################
  'Inputting number of black blocks on the side
  '###############################
  
  Buttons.Flush()
  Buttons.Wait()
  status = Buttons.Current
  
  While status <> "E"
    status = Buttons.Current
    If Text.IsSubText(status, "U") And (blacks < 5) Then
      Buttons.Flush()
      blacks = blacks + 1
    ElseIf Text.IsSubText(status, "D") and (blacks > 1) Then
      Buttons.Flush()
      blacks = blacks - 1
    EndIf
    Speaker.Play(100, "sound/"+blacks)
    Buttons.Wait()
  EndWhile
  
  '###############################
  'Inputting the number that we want to build
  '###############################
  
  If (number_to_build = -1) Then
    Buttons.Flush()
    Buttons.Wait()
    status = Buttons.Current
    
    number_to_build = 7
    bin()
    
    LCD.Text(1,70,20,2,number_to_build)
    LCD.Text(1,30,50,2,tmp[4])
    LCD.Text(1,50,50,2,tmp[3])
    LCD.Text(1,70,50,2,tmp[2])
    LCD.Text(1,90,50,2,tmp[1])
    
    While status <> "E"
      status = Buttons.Current
      If Text.IsSubText(status, "U") And (number_to_build < 15) Then
        Buttons.Flush()
        number_to_build = number_to_build + 1
      ElseIf Text.IsSubText(status, "D") and (number_to_build > -1) Then
        Buttons.Flush()
        number_to_build = number_to_build - 1
      EndIf
      bin()
      LCD.Text(1,70,20,2,number_to_build)
      LCD.Text(1,30,50,2,tmp[4])
      LCD.Text(1,50,50,2,tmp[3])
      LCD.Text(1,70,50,2,tmp[2])
      LCD.Text(1,90,50,2,tmp[1])
      Buttons.Wait()
    EndWhile
  EndIf
  
  whites = 5-blacks
  
  'return[0] = first_block
  'return[1] = second_block
  'return[2] = blacks
  'return[3] = whites
  
EndSub

Sub sort
  'Find out the total number of black blocks and the total number of white blocks
  
  total_black = blacks
  total_white = whites
  
  If (first_block = 1) Then
    total_white= total_white + 1
  Else
    total_black = total_black + 1
  EndIf
  
  If (second_block = 1) Then
    total_white = total_white + 1
  Else
    total_black = total_black + 1
  EndIf
  
  'Get the MSB for each color
  MSB[0] = 0
  MSB[1] = 0
  
  For i=1 To 4
    MSB[binary[i]] = i
  EndFor
  
  'Calculate "map"
  rest_white = total_white
  rest_black = total_black
  
  For i=1 To 4
    If (binary[i] = 1) Then
      slots[i] = 1
      rest_white = rest_white-1
    Else
      slots[i] = -1
      rest_black = rest_black-1
    EndIf
  EndFor
  
  slots[MSB[0]] = slots[MSB[0]] - rest_black
  slots[MSB[1]] = slots[MSB[1]] + rest_white
  
  If ( first_block = 0) Then
    first_block = -1
  EndIf
  
  If ( second_block = 0) Then
    second_block = -1
  EndIf
  
  slots_rest = slots
  slots_placed[1] = 0
  slots_placed[2] = 0
  slots_placed[3] = 0
  slots_placed[4] = 0
  
  'TextWindow.WriteLine(binary)
  'TextWindow.WriteLine("first_block "+first_block)
  'TextWindow.WriteLine("second_block "+second_block)
  'TextWindow.WriteLine("blacks "+blacks)
  'TextWindow.WriteLine("whites "+whites)
  'TextWindow.WriteLine("Black MSB " + MSB[0])
  'TextWindow.WriteLine("White MSB " + MSB[1])
  'TextWindow.WriteLine(slots)
  
EndSub

Sub show
  LCD.Clear()
  
  startX = 100
  startY = 8
  gap = 8
  blockLength = 32
  For i=1 To 4
    If (slots[5-i] < 0) Then
      black = "true"
      num = -1*slots[5-i]
    Else
      black = "false"
      num = slots[5-i]
    EndIf
    
    For a=1 To num
      If (slots[5-i] < 0) Then
        LCD.FillRect(1,startY+(i-1)*blockLength+(i-1)*gap,startX-(a-1)*2-(a-1)*blockLength,blockLength,blockLength)
      Else
        LCD.Rect(1,startY+(i-1)*blockLength+(i-1)*gap,startX-(a-1)*2-(a-1)*blockLength,blockLength,blockLength)
      EndIf
    EndFor
  EndFor
EndSub

Sub calcFirst
  If (first_block = slots[4]) Then
    slot = 4
  ElseIf (first_block = slots[2] and second_block = slots[1]) Then
    slot = 2
  ElseIf (first_block = slots[3]) Then
    slot = 3
  ElseIf (first_block = slots[2]) Then
    slot = 2
  ElseIf (first_block = slots[1]) Then
    slot = 1
  Else
    If (first_block = 1) Then
      If (first_block < slots[4]) Then
        slot = 4
      ElseIf (first_block < slots[3]) Then
        slot = 3
      ElseIf (first_block < slots[2]) Then
        slot = 2
      ElseIf (first_block < slots[1]) Then
        slot = 1
      EndIf
    Else
      If (first_block > slots[4]) Then
        slot = 4
      ElseIf (first_block > slots[3]) Then
        slot = 3
      ElseIf (first_block > slots[2]) Then
        slot = 2
      ElseIf (first_block > slots[1]) Then
        slot = 1
      EndIf
    EndIf
  EndIf
  
  slots_rest[slot] = slots_rest[slot] - first_block
  slots_placed[slot] = 1
  
  first_block_slot = slot
EndSub

Sub placeFirst
  'Drive out of start Area
  F.Call1("driveToEdge",max_speed)
  Program.Delay(300)
  
  'Hop back to be safe
  F.Call2("makeHop",max_back_speed,300)
  Program.Delay(300)
  
  'Make a 90° turn to the right
  F.Call3("turnDegrees",max_turn_speed,93,right)
  Program.Delay(300)
  
  'Drive along edge until in front of block
  F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front,left,3,distance_sensor)
  
  'Close claw
  F.Call0("closeClaw")
  
  'Lift
  F.Call1("liftTo",1)
  
  'Drive along edge until black line detected
  F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front,left,1,sensor_front_right)
  
  If (first_block_slot = 4) Then
    'drive a tiny bit forward
    F.Call2("makeHop",max_speed,150)
    Program.Delay(100)
    
    'Turn a bit to the left
    F.Call3("turnDegrees",max_turn_speed,5,left)
    
    'Set block
    F.Call1("liftTo",0)
    F.Call0("openClaw")
    
    'Turn a bit to the right
    F.Call3("turnDegrees",max_turn_speed,5,left)
    Program.Delay(100)
    
    'Backoff
    F.Call2("makeHop",max_back_speed,300)
    
    'Pull up claw to level 1
    F.Call1("liftTo",1)
    
    'Turn 90°
    F.Call3("turnDegrees",max_turn_speed,90,right)
    Program.Delay(200)
    
    'Drive down
    F.Call1("driveToEdge",max_speed)
    Program.Delay(200)
    
    'Hop Back
    F.Call2("makeHop",max_back_speed,200)
    Program.Delay(300)
    
    '90° turn
    F.Call3("turnDegrees",max_turn_speed,90,right)
    
    'claw down
    F.Call1("liftTo",0)
  Else
    Motor.StartSteer("AD",55,28)
    Program.Delay(1300)
    Motor.Stop("AD","true")
    Program.Delay(200)
    
    If (first_block_slot = 3 ) Then
      'hop back
      Motor.Start("AD",max_back_speed)
      While (F.Call1("isLine",sensor_back) <> 2)
      EndWhile
      Motor.Stop("AD","true")
      
      'hop forward
      Motor.Start("AD",max_speed)
      While (F.Call1("isLine",sensor_back) = 2)
      EndWhile
      Motor.Stop("AD","true")
      
      'Adjust
      Motor.StartSteer("AD",max_turn_speed,100)
      While (F.Call1("isLine",sensor_front) = 2)
      EndWhile
      Motor.Stop("AD","true")
      
      'Set block
      F.Call1("liftTo",0)
      F.Call0("openClaw")
      
      'hop back
      Motor.Start("AD",max_back_speed)
      While (F.Call1("isLine",sensor_back) <> 2)
      EndWhile
      Program.Delay(100)
      Motor.Stop("AD","true")
      
      'Lift claw so it will not push block down
      F.Call1("liftTo",1)
      
      'Turn 90°
      F.Call3("turnDegrees",max_turn_speed,90,right)
      
      'Gain some depth
      F.Call2("makeHop",max_speed,750)
      Program.Delay(300)
      
      'Turn 90°
      F.Call3("turnDegrees",max_turn_speed,88,left)
    ElseIf (first_block_slot <> 3) Then
      'Drive back to align
      Motor.Start("AD",-35)
      Program.Delay(400)
      Motor.Stop("AD","true")
      
      'Left sensor over table, that right sensor is not black
      Motor.StartSteer("AD",max_turn_speed,-50)
      While (F.Call1("IsLine",sensor_front) <> 2)
      EndWhile
      Motor.Stop("AD","true")
      
      For i=2 To 5-first_block_slot
        'Drive to slot
        F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front,left,1,sensor_front_right)
        
        If (first_block_slot = 1 and i = 3) Then
          'align
          Program.Delay(200)
          Motor.StartSteer("AD",20,-50)
          While (F.Call1("IsLine",sensor_front) <> 2)
          EndWhile
          Motor.Stop("AD","true")
        EndIf
      EndFor
      
      If F.Call1("isLine",sensor_back) = 2 Then
        'align
        Motor.Start("A",-10)
        While (F.Call1("isLine",sensor_back) = 2)
        EndWhile
        Motor.Stop("A","true")
      ElseIf F.Call1("isLine",sensor_front) = 2 Then
        Motor.Start("A",10)
        While (F.Call1("isLine",sensor_front) = 2)
        EndWhile
        Motor.Stop("A","true")
      EndIf
      
      'hop to the front
      F.Call2("makeHop",max_speed,200)
      
      'Set block
      F.Call1("liftTo",0)
      F.Call0("openClaw")
      F.Call2("makeHop",max_back_speed,200)
      
      F.Call1("liftTo",1)
      
      'Back off and turn
      Motor.ScheduleSteer("AD",max_back_speed,40,450,"true")
      Motor.Wait("A")
      Program.Delay(200)
      Motor.Move("AD",max_back_speed,250,"true")
      Program.Delay(200)
      
      'Turn 90°
      F.Call3("turnDegrees",max_turn_speed,85,right)
    EndIf
    
    'Drive down
    F.Call1("driveToEdge",max_speed)
    Program.Delay(200)
    
    'Hop Back
    F.Call2("makeHop",max_back_speed,200)
    Program.Delay(200)
    
    '90° turn
    F.Call3("turnDegrees",max_turn_speed,85,right)
    
    'claw down
    F.Call1("liftTo",0)
  EndIf
  
EndSub

Sub calcSecond
  If (second_block = slots_rest[1]) Then
    slot = 1
  ElseIf (second_block = slots_rest[2]) Then
    slot = 2
  ElseIf (second_block = slots_rest[3]) Then
    slot = 3
  ElseIf (second_block = slots_rest[4]) Then
    slot = 4
  Else
    If (second_block = 1) Then
      If (second_block < slots_rest[1]) Then
        slot = 1
      ElseIf (second_block< slots_rest[2]) Then
        slot = 2
      ElseIf (second_block < slots_rest[3]) Then
        slot = 3
      ElseIf (second_block < slots_rest[4]) Then
        slot = 4
      EndIf
    Else
      If (second_block > slots_rest[1]) Then
        slot = 1
      ElseIf (second_block > slots_rest[2]) Then
        slot = 2
      ElseIf (second_block > slots_rest[3]) Then
        slot = 3
      ElseIf (second_block > slots_rest[4]) Then
        slot = 4
      EndIf
    EndIf
  EndIf
  
  slots_rest[slot] = slots_rest[slot] - second_block
  slots_placed[slot] = slots_placed[slot] + 1
  
  second_block_slot = slot
EndSub

Sub placeSecond
  'Drive till block found
  F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front,left,3,distance_sensor)
  
  'Pick it up
  F.Call0("closeClaw")
  If (second_block_slot = first_block_slot) Then
    F.Call1("liftTo",2)
  Else
    F.Call1("liftTo",1)
  EndIf
  
  If (second_block_slot <= first_block_slot) Then
    '180° turn
    F.Call3("turnDegrees",max_turn_speed,170,right)
    
    'Drive till black line detected
    F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front_right,right,1,sensor_front)
    
    If (second_block_slot = 1) Then
      'drive a tiny bit forward
      F.Call2("makeHop",max_speed,150)
      Program.Delay(100)
      
      'Set block
      If (second_block_slot = first_block_slot) Then
        F.Call1("liftTo",1)
      Else
        F.Call1("liftTo",0)
      EndIf
      F.Call0("openClaw")
      
      'drive backwards
      F.Call2("makeHop",max_back_speed,400)
      Program.Delay(200)
      
      '90° turn to top of table
      F.Call3("turnDegrees",max_turn_speed,90,left)
      
      'Drive till at edge
      F.Call1("driveToEdge",max_speed)
      Program.Delay(200)
    
      'Back off
      F.Call2("makeHop",max_back_speed,300)
      Program.Delay(200)
      
      '90° turn
      F.Call3("turnDegrees",max_turn_speed,90,left)
      
      'Now ready to wiggle home ->
      F.Call1("liftTo",0)
    ElseIf (second_block_slot = 2) Then
      'Turn 90° left
      F.Call3("turnDegrees",max_turn_speed,90,left)
      Program.Delay(200)
      
      'Drive till parallel to slot 2
      F.Call2("makeHop",max_speed,600)
      Program.Delay(300)
      
      'Turn 90° right
      F.Call3("turnDegrees",max_turn_speed,95,right)
      Program.Delay(300)
      
      'Set block
      If (second_block_slot = first_block_slot) Then
        'Slowly and carefully approach block
        Motor.Start("AD",20)
        While (Sensor.ReadRawValue(distance_sensor,0) > 60)
        EndWhile
        Motor.Stop("AD","true")
        F.Call1("liftTo",1)
      Else
        Program.Delay(300)
        F.Call2("makeHop",max_speed,250)
        F.Call1("liftTo",0)
      EndIf
      F.Call0("openClaw")
      
      'Hop back
      F.Call2("makeHop",max_back_speed,500)
      
      '90° turnDegrees
      F.Call3("turnDegrees",max_turn_speed,90,left)
      Program.Delay(200)
      
      'Drive till at edge
      F.Call1("driveToEdge",max_speed)
      Program.Delay(200)
    
      'Back off
      F.Call2("makeHop",max_back_speed,300)
      Program.Delay(200)
      
      '90° turn
      F.Call3("turnDegrees",max_turn_speed,90,left)
      F.Call1("liftTo",0)
      
      'Drive home ->
    ElseIf (second_block_slot = 3 or second_block_slot = 4) Then
      'TUrn into slot 2
      Motor.StartSteer("AD",55,-28)
      Program.Delay(1300)
      Motor.Stop("AD","true")
      Program.Delay(200)
      
      If (second_block_slot = 3 and second_block_slot <> first_block_slot) Then
        'Drive till in front of block
        F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front_right,right,5,distance_sensor)
        Motor.Start("AD",max_back_speed)
        While (Sensor.ReadRawValue(distance_sensor,0) < 220)
        EndWhile
        Motor.Stop("AD",true)
        
        F.Call1("liftTo",0)
        F.Call0("openClaw")
      Else
        F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front_right,right,3,distance_sensor)
        Motor.Start("AD",max_back_speed)
        While (Sensor.ReadRawValue(distance_sensor,0) < 55)
        EndWhile
        Motor.Stop("AD",true)
        
        'set block
        F.Call1("liftTo",1)
        F.Call0("openClaw")
      EndIf
      
      'Drive back 
      F.Call2("makeHop",max_back_speed,800)
      
      '90° turnDegrees
      F.Call3("turnDegrees",max_turn_speed,90,left)
      Program.Delay(200)
      
      'Gain some depth
      F.Call2("makeHop",max_speed,1000)
      
      '90° turnDegrees
      F.Call3("turnDegrees",max_turn_speed,90,right)
      Program.Delay(200)
      
      'Drive till at edge
      F.Call1("driveToEdge",max_speed)
      Program.Delay(200)
    
      'Back off
      F.Call2("makeHop",max_back_speed,300)
      Program.Delay(200)
      
      '90° turn
      F.Call3("turnDegrees",max_turn_speed,90,left)
      
      'Drive home ->
    EndIf
  Else
    '90° turn
    F.Call3("turnDegrees",max_turn_speed,90,right)
    Program.Delay(200)
    
    'Drive to other side
    F.Call1("driveToEdge",max_speed)
    Program.Delay(200)
    
    'Back off
    F.Call2("makeHop",max_back_speed,300)
    Program.Delay(200)
    
    '90° turn
    F.Call3("turnDegrees",max_turn_speed,90,right)
    Program.Delay(200)
    
    'Drive till first slot
    F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front,left,1,sensor_front_right)
    
    If (second_block_slot = 4) Then
      'drive a tiny bit forward
      F.Call2("makeHop",max_speed,150)
      Program.Delay(100)
      
      'Turn a bit to the left
      F.Call3("turnDegrees",max_turn_speed,5,left)
      
      'Set block
      F.Call1("liftTo",0)
      F.Call0("openClaw")
      
      'Turn a bit to the right
      F.Call3("turnDegrees",max_turn_speed,5,left)
      Program.Delay(100)
      
      'Backoff
      F.Call2("makeHop",max_back_speed,600)
      
      'Turn 180°
      F.Call3("turnDegrees",max_turn_speed,180,left)
      Program.Delay(200)
      
      'Ready to drive home-->
    ElseIf (second_block_slot = 3) Then
      Motor.StartSteer("AD",55,28)
      Program.Delay(1300)
      Motor.Stop("AD","true")
      Program.Delay(200)
      
      'hop back
      Motor.Start("AD",max_back_speed)
      While (F.Call1("isLine",sensor_back) <> 2)
      EndWhile
      Motor.Stop("AD","true")
      
      'hop forward
      Motor.Start("AD",max_speed)
      While (F.Call1("isLine",sensor_back) = 2)
      EndWhile
      Motor.Stop("AD","true")
      
      'Adjust
      Motor.StartSteer("AD",max_turn_speed,100)
      While (F.Call1("isLine",sensor_front) = 2)
      EndWhile
      Motor.Stop("AD","true")
      
      'Set block
      F.Call1("liftTo",0)
      F.Call0("openClaw")
      
      'hop back
      Motor.Start("AD",max_back_speed)
      While (F.Call1("isLine",sensor_back) <> 2)
      EndWhile
      Program.Delay(100)
      Motor.Stop("AD","true")
      
      'Lift claw so it will not push block down
      F.Call1("liftTo",1)
      
      'Turn 90°
      F.Call3("turnDegrees",max_turn_speed,90,right)
      
      'Drive home -->
    ElseIf (second_block_slot = 2) Then
      Motor.StartSteer("AD",55,28)
      Program.Delay(1300)
      Motor.Stop("AD","true")
      Program.Delay(200)
      
      F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front,left,5,distance_sensor)
      F.Call1("liftTo",0)
      F.Call0("openClaw")
      
      'hop back
      F.Call2("makeHop",max_back_speed,600)
      Program.Delay(200)
      
      '90° turn
      F.Call3("turnDegrees",max_turn_speed,90,right)
      Program.Delay(200)
      
      'gain depth
      F.Call2("makeHop",max_speed,600)
      Program.Delay(200)
      
      '90° turn
      F.Call3("turnDegrees",max_turn_speed,90,right)
      Program.Delay(200)
      
      'Drive till edge
      F.Call1("driveToEdge",max_speed)
      
      'Back off
      F.Call2("makeHop",max_back_speed,300)
      Program.Delay(200)
      
      '90° turn
      F.Call3("turnDegrees",max_turn_speed,90,left)
      
      '--> drive home
    EndIf
  EndIf
  '-------------> Drive home 
  'MUST BE TESTED
  'Claw down
  F.Call1("liftTo",0)
  
  'Drive along edge
  F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front,left,2,sensor_front_right)
  
  '90° turn
  F.Call3("turnDegrees",max_turn_speed,90,left)
  
  'Drive into start area
  F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front,left,2,sensor_front_right)
EndSub

'#################### Functions #####################
F.Start = makeHop
F.Function("makeHop","speed time")
Sub makeHop
  Motor.Start("AD",F.Get("speed"))
  Program.delay(F.Get("time"))
  Motor.Stop("AD",true)
EndSub

F.Start = checkMotor
F.Function("checkMotor","port")
Sub checkMotor
  letters[1] = "A"
  letters[2] = "B"
  letters[3] = "C"
  letters[4] = "D"
  
  port = letters[F.Get("port")]
  Motor.Start(port,20)
  Program.Delay(100)
  speed = Motor.GetCount(port)
  Motor.Stop(port,"true")
  If (speed = 0) Then
    F.ReturnNumber(1)
  EndIf
  F.ReturnNumber(0)
EndSub

F.Start = checkSensor
F.Function("checkSensor","port type mode")
Sub checkSensor
  'Get Parameters
  num = F.Get("port")
  type = F.Get("type")
  mode = F.Get("mode")
  
  'Query all data from the sensor
  real_type = Sensor.getType(num)
  real_name = Sensor.getName(num)
  real_mode = Sensor.getMode(num)
  
  'Check if Sensor is connected
  If (real_type = 126) Then
    'Sensor not connected
    F.ReturnNumber(1)
  EndIf
  
  'Check if right Sensor is connected
  If (real_type <> type) Then
    'Wrong Sensor Connected
    F.ReturnNumber(2)
  EndIf
  
  'Check if sensor is in right Mode
  If (real_mode <> mode) Then
    'TextWindow.WriteLine("Setting Mode")
    'Set to right mode
    Sensor.SetMode(num,mode)
    'Check if mode really switched
    If (mode <> Sensor.GetMode(num)) Then
      'TextWindow.WriteLine("Failed")
      F.ReturnNumber(3)
    EndIf
  EndIf
  F.ReturnNumber(0)
EndSub

F.Start = isLine
F.Function("isLine","port r g b")
Sub isLine
  F.Set("r",Sensor.ReadRawValue(F.Get("port"),0))
  F.Set("g",Sensor.ReadRawValue(F.Get("port"),1))
  F.Set("b",Sensor.ReadRawValue(F.Get("port"),2))
  If ((F.get("r") + F.get("g") + F.get("b") < 40) Or F.get("r") > 500 Or F.get("g") > 500 Or F.get("b") > 500) Then
    F.ReturnNumber(2)
  ElseIf (F.get("r") < 70 and F.get("g") < 70 and F.get("b") < 70) Then
    F.ReturnNumber(1)
  Else
    F.ReturnNumber(0)
  EndIf
EndSub

F.Start = driveToEdge
F.Function("driveToEdge","speed sensor motor direction")
Sub driveToEdge
  'Drive until edge detected
  Motor.Start("AD",F.Get("speed"))
  While (F.Call1("IsLine",sensor_front) <> 2 and F.Call1("IsLine",sensor_front_right) <> 2)
  EndWhile
  Motor.Stop("AD","true")
  
  'Check if both motors are over the edge
  If (F.Call1("IsLine",sensor_front) <> 2 or F.Call1("IsLine",sensor_front_right) <> 2) Then
    If (F.Call1("IsLine",sensor_front) <> 2) Then
      'Sensor1 not over the edge
      F.Set("sensor",1)
      F.Set("direction",50)
      F.Set("motor",motor_left_num)
    Else
      'Sensor 2 not over the edge
      F.Set("sensor",sensor_front_right)
      F.Set("direction",-50)
      F.Set("motor",motor_right_num)
    EndIf
    
    'Start the Motors until aligned
    Motor.Start(Motors[F.Get("motor")],max_speed)
    While (F.Call1("IsLine",F.Get("Sensor")) <> 2)
    EndWhile
    Motor.Stop("AD","true")
  EndIf
EndSub

F.Start = turnDegrees
F.Function("turnDegrees","speed degrees turn")
Sub turnDegrees
  'Adjust degree conversion
  'For example 360 degree turn might end up just beeing 330°
  If (F.Get("turn") = right) Then
    F.Set("turn",100)
  Else
    F.Set("turn",-100)
  EndIf
  
  Motor.MoveSteer("AD",F.Get("speed"),F.Get("turn"),F.Get("degrees")*2,"true")
EndSub

F.Start = driveAlongEdge
F.Function("driveAlongEdge","speed sensor side mode port drive")
Sub driveAlongEdge
  F.Set("drive",0)
  
  'Check which sensor it is wiggling with and in which direction
  'Direction 0 means "normal"
  If (F.Get("side") = right) Then
    'Direction 1 means right sensor
    F.Set("side",-1)
  ElseIf (F.Get("side") = left) Then
    F.Set("side",1)
  ElseIf (F.Get("side") = back) Then
    F.Set("speed",F.Get("speed")*-1)
    F.Set("side",1)
  EndIf
  
  While (F.Get("drive") = 0)
    If (F.Get("mode") = 1) Then
      'Drive until black line reached
      If (F.Call1("IsLine",F.Get("port")) = 1) Then
        F.Set("drive",1)
      EndIf
    ElseIf (F.Get("mode") = 2) Then
      'Drive until end of the table
      If (F.Call1("IsLine",F.Get("port")) = 2) Then
        F.Set("drive",1)
      EndIf
    ElseIf (F.Get("mode") = 3) Then
      'Drive until block reached
      If (Sensor.ReadRawValue(F.Get("port"),0) < 45) Then
        F.Set("drive",1)
      ElseIf (Sensor.ReadRawValue(F.Get("port"),0) < 80) Then
        F.Set("speed",18)
      EndIf
    ElseIf (F.Get("mode") = 4) Then
      'Special mode to drive into slot 4 stopping when sensor front over table and sensor back black
      If (F.Call1("IsLine",sensor_front) = 2 and F.Call1("IsLine",sensor_back) = 1) or (F.Call1("IsLine",sensor_front_right) = 3) Then
        F.Set("drive",1)
      EndIf
    ElseIf (F.Get("mode") = 5) Then
      If (Sensor.ReadRawValue(F.Get("port"),0) < 220) Then
        F.Set("drive",1)
      EndIf
    EndIf
    'Wiggle function
    If (F.Call1("IsLine",F.Get("sensor")) = 0) Then
      'Drive left
      Motor.StartSteer("AD",F.Get("speed"),-7*F.Get("side"))
    EndIf
    If (F.Call1("IsLine",F.Get("sensor")) <> 0) Then
      'Drive right
      Motor.StartSteer("AD",F.Get("speed"),25*F.Get("side"))
    EndIf
  EndWhile
  'And finished
  Motor.Stop("AD","true")
EndSub

F.Start = closeClaw
F.Function("closeClaw","initial")
Sub closeClaw
  F.Set("initial",Motor.GetCount(motor_grab))
  Motor.Start(motor_grab,-100)
  Program.Delay(300)
  While (Motor.GetSpeed(motor_grab) < -45)
  EndWhile
  Motor.Stop(motor_grab,"true")
  claw_status = -1*Motor.GetCount(motor_grab)-F.Get("initial")
EndSub

F.Start = openClaw
F.Function("openClaw","degrees")
Sub openClaw
  Motor.Move("C",100,claw_status,"true")
  claw_status = 0
EndSub

F.Start = liftTo
F.Function("liftTo","floor")
Sub liftTo
  If (F.Get("floor") > claw_height) Then
    Motor.Move(motor_lift,100,(F.Get("floor")-claw_height)*block_height,"true")
  Else
    Motor.Move(motor_lift,-100,(F.Get("floor")-claw_height)*block_height,"true")
  EndIf
  claw_height = F.Get("floor")
EndSub

'################ Sandbox area ###############

checkLaunchStatus()
input()
sort()
show()
Program.Delay(1000)
calcFirst()
placeFirst()
calcSecond()
placeSecond()
'F.Call1("driveToEdge",max_speed)
'F.Call3("turnDegrees",max_turn_speed,180,"right")
'F.Call5("driveAlongEdge",max_wiggle_speed,sensor_front,"left",3,distance_sensor)
'F.Call0("closeClaw")
'F.Call0("openClaw")
'F.Call1("liftTo",1)
'F.Call1("liftTo",0)
'F.Call1("liftTo",2)
'F.Call1("liftTo",0)
